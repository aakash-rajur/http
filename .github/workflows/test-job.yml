name: "Unit and Integration"

on:
  workflow_call:
    inputs:
      ref:
        type: string
        description: 'Branch or tag'
        required: true
        default: 'main'

env:
  POSTGRESQL_VERSION: 16
  POSTGRESQL_IMAGE: bitnami/postgresql
  TMDB_PG_PORT: 54320
  TMDB_PG_DATABASE: app
  TMDB_PG_USER: app
  TMDB_PG_PASSWORD: app
  TMDB_PG_CONTAINER_NAME: tmdb-pg
  MYSQL_IMAGE: mysql
  MYSQL_VERSION: 8.0
  TMDB_MYSQL_PORT: 33060
  TMDB_MYSQL_DATABASE: app
  TMDB_MYSQL_USER: app
  TMDB_MYSQL_PASSWORD: app
  TMDB_MYSQL_ROOT_PASSWORD: root
  TMDB_MYSQL_CONTAINER_NAME: tmdb-mysql

jobs:
  test:
    name: "Unit and Integration"
    runs-on: ubuntu-latest
    steps:
      - id: checkout
        name: checkout
        uses: actions/checkout@v4
        with:
          ref: ${{ github.event.inputs.ref }}
      - id: setup-go
        name: setup go
        uses: actions/setup-go@v4
        with:
          go-version: 1.21
      - id: install-dependencies
        name: install dependencies
        run: go mod download
#      - id: image-cache-setup
#        name: service container cache setup
#        uses: actions/cache@v3
#        with:
#          path: /tmp/image-cache
#          key: test-${{ runner.os }}-image-cache
#      - id: image-cache
#        name: service container cache
#        if: steps.image-cache-setup.outputs.cache-hit != 'true'
#        run: |
#          docker pull ${{ env.POSTGRESQL_IMAGE }}:${{ env.POSTGRESQL_VERSION }};
#
#          docker pull ${{ env.MYSQL_IMAGE }}:${{ env.MYSQL_VERSION }};
#
#          mkdir -p /tmp/image-cache;
#
#          docker save ${{ env.POSTGRESQL_IMAGE }}:${{ env.POSTGRESQL_VERSION }} > /tmp/image-cache/postgresql.tar;
#
#          docker save ${{ env.MYSQL_IMAGE }}:${{ env.MYSQL_VERSION }} > /tmp/image-cache/mysql.tar;
#      - id: image-cache-restore
#        name: service container cache restore
#        if: steps.image-cache-setup.outputs.cache-hit == 'true'
#        run: |
#          docker load -i /tmp/image-cache/postgresql.tar;
#
#          docker load -i /tmp/image-cache/mysql.tar;
      - id: test
        name: run tests
        run: |
          go test -json . 2>&1 | tee TestResults.json
      - name: upload test results
        uses: actions/upload-artifact@v3
        with:
          name: TestResults
          path: TestResults.json
